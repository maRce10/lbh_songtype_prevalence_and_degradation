---
title: Song type selection by prevalence
subtitle: LBH song type prevalence and degradation
author: <a href="http://researcher.website.com/">Researcher name</a>
date: "`r Sys.Date()`"
toc: true
toc-depth: 2
toc-location: left
number-sections: true
highlight-style: pygments
format:
  html:
    df-print: kable
    code-fold: show
    code-tools: true
    css: qmd.css
editor_options: 
  chunk_output_type: console
---


<!-- this code add line numbers to code blocks -->
<!-- only works when code folding is not used in yaml (code_folding: show) -->

```{=html}
<style>
body
  { counter-reset: source-line 0; }
pre.numberSource code
  { counter-reset: none; }
</style>
```

```{r set root directory, echo = FALSE}

# set working directory as project directory or one directory above,
rootdir <- try(rprojroot::find_rstudio_root_file(), silent = TRUE)
if (is(rootdir, "try-error")) rootdir <-  ".."
knitr::opts_knit$set(root.dir = rootdir)

```

```{r add link to github repo, echo = FALSE, results='asis'}

# print link to github repo if any
if (file.exists("./.git/config")){
  config <- readLines("./.git/config")
  url <- grep("url",  config, value = TRUE)
  url <- gsub("\\turl = |.git$", "", url)
  cat("\nSource code and data found at [", url, "](", url, ")", sep = "")
  }

```


```{r setup style, echo = FALSE, message = FALSE, warning=FALSE}

# options to customize chunk outputs
knitr::opts_chunk$set(
  class.source = "numberLines lineAnchors", # for code line numbers
  tidy.opts = list(width.cutoff = 65), 
  tidy = TRUE,
  message = FALSE
 )

```


<!-- skyblue box -->
<div class="alert alert-info">

# Purpose

- The first goal of this report

- The second goal of this report

</div>

&nbsp; 


<!-- light brown box -->
<div class="alert alert-warning">

# Report overview

- You can have the sections listed here, for instance:

  - [Lorem ipsum](#lorem-ipsum)
  - [Takeaways](#takeaways)

</div>

&nbsp;

# Load packages

```{r load packages}

# knitr is require for creating html/pdf/word reports
# formatR is used for soft-wrapping code

# install/ load packages
sketchy::load_packages(packages = c("knitr", "formatR", "rprojroot", "warbleR"))

```

# Lorem ipsum


```{r}

est <- readRDS("./data/raw/EST all sels aug 2019.RDS")

# get prevalence (number of years) per song type
prev_st <- sapply(unique(est$lek.song.type), function(x)
  max(est$year[est$lek.song.type == x]) - min(est$year[est$lek.song.type == x]) + 1
)

# get names of song types with 5 or more years
hi_prev_st <- names(prev_st)[prev_st >= 5]

# get names of song types that 
lo_prev_st <- names(prev_st)[prev_st == 1]

# get which of those the leks were recorded before and after
out <- sapply(lo_prev_st, function(x){
  x_year <- unique(est$year[est$lek.song.type == x])
  
  years <- c(x_year - 1, x_year, x_year + 1)
  
  out <- if (all(years %in% unique(est$year[est$lek == substr(x, 0, 3)])))  x
  else NA
})

lo_prev_st <- names(out)[!is.na(out)]

# keep est with low and high prevalence song types only
est_prev <- est[est$lek.song.type %in% c(hi_prev_st, lo_prev_st), ]

# homogenize sample rate and bit depth

est_prev <- resample_est_waves(est_prev, samp.rate = 44.1, bit.depth = 16, parallel = 20)

est_prev$prevalence <- ifelse(est_prev$lek.song.type %in% hi_prev_st, "high", "low")

# number of song types per category
table(est_prev$prevalence[!duplicated(est_prev$lek.song.type)])

saveRDS(est_prev, "./data/raw/extended_selection_table_high_and_low_prevalence_songtype.RDS")


```

<!-- '&nbsp;' adds blank space -->



<!-- light green box -->

<div class="alert alert-success">

# Takeaways {.unnumbered .unlisted}

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum in felis ut mauris consectetur sodales. Lorem ipsum dolor sit amet, consectetur adipiscing elit.

</div>

&nbsp;

<!-- '---' adds a gray vertical line -->

---

&nbsp; 
 
 <!-- add packages used, system details and versions  -->
 
<font size="4">Session information</font>

```{r session info, echo=F}

sessionInfo()

```
